// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Database.DB {
    public partial class SupplierbaseContext : DbContext {
        public SupplierbaseContext()
        {
        }

        public SupplierbaseContext(DbContextOptions<SupplierbaseContext> options)

            : base(options)
        {
        }

        public virtual DbSet<Limit> Limits { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Shop> Shops { get; set; }
        public virtual DbSet<ShopDistribution> ShopDistributions { get; set; }
        public virtual DbSet<ShopProduct> ShopProducts { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            Config.Setup();
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(Config.ConnectionStrings["SupplierBase"]);
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<Limit>(entity =>
            {
                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Limits)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Limits_Products");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Shop>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ShopDistribution>(entity =>
            {
                entity.HasKey(e => new { e.ShopId, e.ProductId, e.LimitId })
                    .HasName("PK_Table_1_1");

                entity.ToTable("ShopDistribution");

                entity.Property(e => e.Percentage).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ShopProduct>(entity =>
            {
                entity.HasKey(e => new { e.ShopId, e.ProductId });
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}